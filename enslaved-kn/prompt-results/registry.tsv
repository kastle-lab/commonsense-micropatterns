registry	Construct an ontology focused on the following: registry. Provide it in valid Turtle/RDF format, excluding any extra text.	```turtle@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .@prefix reg: <http://www.example.org/registry#> .reg:Registry rdf:type rdfs:Class .reg:registryID rdf:type rdf:Property ;    rdfs:domain reg:Registry ;    rdfs:range xsd:string .reg:registryName rdf:type rdf:Property ;    rdfs:domain reg:Registry ;    rdfs:range xsd:string .reg:registrationDate rdf:type rdf:Property ;    rdfs:domain reg:Registry ;    rdfs:range xsd:dateTime .reg:Entry rdf:type rdfs:Class .reg:entryID rdf:type rdf:Property ;    rdfs:domain reg:Entry ;    rdfs:range xsd:string .reg:entryData rdf:type rdf:Property ;    rdfs:domain reg:Entry ;    rdfs:range xsd:string .reg:entryInRegistry rdf:type rdf:Property ;    rdfs:domain reg:Entry ;    rdfs:range reg:Registry .reg:createdIn rdf:type rdf:Property ;    rdfs:domain reg:Registry ;    rdfs:range reg:Entry .```This ontology defines a `Registry` and an `Entry`. A `Registry` has properties like `registryID`, `registryName`, and `registrationDate`. Similarly, an `Entry` has properties such as `entryID` and `entryData`. In addition, `entryInRegistry` links an `Entry` to the `Registry` it belongs to, and `createdIn` denote which `Entry` was created in which `Registry`.
