 It's based on the assumption that "Guy" is a person. Depending on context, "Guy" could refer to something else, so you might need to adapt it to your needs. We're assuming "Guy" to be an individual, with a corresponding full name, an age, a job title, an email, and interests.You can easily extend the shown ontology by adding more properties or classes. Make sure to use valid URI's for your ontology, I've used dummy URI's for the purpose of the example.
@prefix ex: <http://example.org/>.ex:Guy a ex:Person ;
    ex:hasFullName "Guy Example" ;
    ex:hasAge 32 ;
    ex:hasJobTitle "Software Engineer" ;
    ex:hasEmail "guy@example.org" ;
    ex:hasInterest ex:Programming , ex:Cycling .
    ex:Person a ex:Class .
ex:hasFullName a ex:Property ;
    rdfs:domain ex:Person ;
    rdfs:range xsd:string .
ex:hasAge a ex:Property ;
    rdfs:domain ex:Person ;
    rdfs:range xsd:integer .
ex:hasJobTitle a ex:Property ;
    rdfs:domain ex:Person;
    rdfs:range xsd:string .
ex:hasEmail a ex:Property ;
    rdfs:domain ex:Person ;
    rdfs:range xsd:string .
  ex:hasInterest a ex:Property ;
    rdfs:domain ex:Person ;
    rdfs:range ex:Interest.    ex:Interest a ex:Class.ex:Programming a ex:Interest.ex:Cycling a ex:Interest.
